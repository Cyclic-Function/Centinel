def get_args():
    parser = argparse.ArgumentParser()
    # parser.add_argument('--task', type=str, default='control_envs/ContinuousCartPole-v0')
    parser.add_argument('--reward-threshold', type=float, default=None)
    parser.add_argument('--seed', type=int, default=2)
    parser.add_argument('--buffer-size', type=int, default=30000)
    parser.add_argument('--lr', type=float, default=1e-3)
    parser.add_argument('--gamma', type=float, default=0.95)
    parser.add_argument('--epoch', type=int, default=1)     # was 5
    parser.add_argument('--step-per-epoch', type=int, default=30000)   # was 150000
    parser.add_argument('--episode-per-collect', type=int, default=64)
    parser.add_argument('--repeat-per-collect', type=int, default=1)
    parser.add_argument('--batch-size', type=int, default=1000)
    parser.add_argument('--hidden-sizes', type=int, nargs='*', default=[128, 128, 128, 128])
    parser.add_argument('--training-num', type=int, default=16)  # was 16
    parser.add_argument('--test-num', type=int, default=16)  # was 100
    parser.add_argument('--logdir', type=str, default='log')
    parser.add_argument('--render', type=float, default=0.05)
    parser.add_argument(
        '--device', type=str, default='cuda' if torch.cuda.is_available() else 'cpu'
    )
    # ppo special
    parser.add_argument('--vf-coef', type=float, default=0.25)
    parser.add_argument('--ent-coef', type=float, default=0.0)
    parser.add_argument('--eps-clip', type=float, default=0.2)
    parser.add_argument('--max-grad-norm', type=float, default=0.5)
    parser.add_argument('--gae-lambda', type=float, default=0.95)
    parser.add_argument('--rew-norm', type=int, default=1)
    parser.add_argument('--dual-clip', type=float, default=None)
    parser.add_argument('--value-clip', type=int, default=1)
    parser.add_argument('--norm-adv', type=int, default=1)
    parser.add_argument('--recompute-adv', type=int, default=0)
    parser.add_argument('--resume', action="store_true")
    parser.add_argument("--save-interval", type=int, default=4)
    args = parser.parse_known_args()[0]
    return args

def get_single_agent(args: argparse.Namespace, env) -> BasePolicy:
    net = Net(args.state_shape, hidden_sizes=args.hidden_sizes, device=args.device)
    actor = ActorProb(
        net, args.action_shape, max_action=args.max_action, device=args.device
    ).to(args.device)
    critic = Critic(
        Net(args.state_shape, hidden_sizes=args.hidden_sizes, device=args.device),
        device=args.device
    ).to(args.device)
    actor_critic = ActorCritic(actor, critic)
    # orthogonal initialization
    for m in actor_critic.modules():
        if isinstance(m, torch.nn.Linear):
            torch.nn.init.orthogonal_(m.weight)
            torch.nn.init.zeros_(m.bias)
    optim = torch.optim.Adam(actor_critic.parameters(), lr=args.lr)

    # replace DiagGuassian with Independent(Normal) which is equivalent
    # pass *logits to be consistent with policy.forward
    def dist(*logits):
        return Independent(Normal(*logits), 1)

    agent = PPOPolicy(
        actor,
        critic,
        optim,
        dist,
        discount_factor=args.gamma,
        max_grad_norm=args.max_grad_norm,
        eps_clip=args.eps_clip,
        vf_coef=args.vf_coef,
        ent_coef=args.ent_coef,
        reward_normalization=args.rew_norm,
        advantage_normalization=args.norm_adv,
        recompute_advantage=args.recompute_adv,
        dual_clip=args.dual_clip,
        value_clip=args.value_clip,
        gae_lambda=args.gae_lambda,
        action_space=env.action_space,
    )
    
    # if args.resume_path:
    #     agent.load_state_dict(torch.load(args.resume_path))
    # TODO: uncomment this
    
    return agent
    

def get_agents(
    args: argparse.Namespace = get_args(),
    agent_weak: Optional[BasePolicy] = None,
    agent_strong: Optional[BasePolicy] = None,
    gym_attrs: Dict[str, any] = None
) -> Tuple[BasePolicy, torch.optim.Optimizer, list]:
    pass
    # currently only implemented for one agent
    
    # env = gym.make(args.task)
    env = get_packaged_env(attrs=gym_attrs)
    
    # args.state_shape = env.observation_space.shape or env.observation_space.n
    observation_space = env.observation_space['observation'] if isinstance(
        env.observation_space, gym.spaces.Dict
    ) else env.observation_space
    args.state_shape = observation_space.shape or observation_space.n
    # print('old')
    # print(env.observation_space.shape or env.observation_space.n)
    # print('new')
    # print(args.state_shape)
    # print('+')
    
    args.action_shape = env.action_space.shape or env.action_space.n
    
    args.max_action = env.action_space.high[0]
    # print(args.max_action, 'maxi')
    
    if agent_weak is None:
        agent_weak = get_single_agent(args, env)
    if agent_strong is None:
        agent_strong = get_single_agent(args, env)
    # TODO: single instance of env or multiple?
    
    agents = [agent_weak, agent_strong]
    policy = MultiAgentPolicyManager(agents, env)
    
    # print(env.agents, 'Ag')   # what is this
    
    return policy, env.agents

def get_packaged_env(attrs=None, render_mode=None, callable=False):
    # return gym.make('control_envs/ContinuousCartPole-v0', render_mode=render_mode)
    def get_env(render_mode=None):
        return PettingZooEnv(witsenhausen_cartpole_v0.env(attrs=attrs, render_mode=render_mode))

    if callable:
        return get_env
    else:
        return get_env(render_mode=render_mode)

def freeze_parameters(parameters):
    for param in parameters:
        param.requires_grad = False

def unfreeze_parameters(self, parameters):
    for param in parameters:  # make this just model.parameters()
        param.requires_grad = True

def train_agent(
    args: argparse.Namespace = get_args(),
    agent_weak: Optional[BasePolicy] = None,
    agent_strong: Optional[BasePolicy] = None,
    gym_attrs: Dict[str, any] = None
) -> Tuple[dict, BasePolicy]:
    train_envs = SubprocVectorEnv([get_packaged_env(attrs=gym_attrs, callable=True) for _ in range(args.training_num)])
    test_envs = SubprocVectorEnv([get_packaged_env(attrs=gym_attrs, callable=True) for _ in range(args.test_num)])
    # seed
    np.random.seed(args.seed)
    torch.manual_seed(args.seed)
    train_envs.seed(args.seed)
    test_envs.seed(args.seed)

    # ======== agent setup =========
    policy, agents = get_agents(
        args, agent_weak=agent_weak, agent_strong=agent_strong, gym_attrs=gym_attrs
    )
    
    train_collector = Collector(
        policy, train_envs, VectorReplayBuffer(args.buffer_size, len(train_envs))
    )
    test_collector = Collector(policy, test_envs)
    # TODO: add exploration noise?
    # log
    log_path = os.path.join(args.logdir, "witsenhausen_cartpole", "ppo")
    writer = SummaryWriter(log_path)
    logger = TensorboardLogger(writer, save_interval=args.save_interval)

    def save_best_fn(policy):
        torch.save(policy.state_dict(), os.path.join(log_path, "policy.pth"))

    def stop_fn(mean_rewards):
        return False

    def save_checkpoint_fn(epoch, env_step, gradient_step):
        # see also: https://pytorch.org/tutorials/beginner/saving_loading_models.html
        ckpt_path = os.path.join(log_path, "checkpoint.pth")
        # Example: saving by epoch num
        # ckpt_path = os.path.join(log_path, f"checkpoint_{epoch}.pth")
        torch.save(
            {
                "model": policy.state_dict(),
                # "optim": optim.state_dict(),
            }, ckpt_path
        )
        return ckpt_path

    if args.resume:
        # load from existing checkpoint
        print(f"Loading agent under {log_path}")
        ckpt_path = os.path.join(log_path, "checkpoint.pth")
        if os.path.exists(ckpt_path):
            checkpoint = torch.load(ckpt_path, map_location=args.device)
            policy.load_state_dict(checkpoint["model"])
            # optim.load_state_dict(checkpoint["optim"])
            print("Successfully restore policy and optim.")
        else:
            print("Fail to restore policy and optim.")
    
    # policy.policies['agent_strong'].frozen = True

    # freeze_parameters(policy.policies['agent_strong'].parameters())

    rank = {
        'agent_weak': 1,
        'agent_strong': 2
    }
    ############################################################################
    # In deterministic Centinel, if A has rank 1 and B has rank 9, then for    #
    # every 1 epoch that A trains, B trains 9 epochs. Epoch here is in         #
    # Tianshou terminology.                                                    #
    # In monte carlo Centinel, A would have 0.1 probabilitiy to be picked for  #
    # training 1 epoch and B would have 0.9 probability to be picked for       #
    # training                                                                 #
    ############################################################################
    
    # policy.freeze('agent_strong')
    # policy.freeze('agent_weak')

    reps = 100

    for i in range(reps):
      print('-----------------------------------------------------------------')
      print(f"Rep: {i}")

      policy.freeze('agent_strong')
      trainer_weak = OnpolicyTrainer(
          policy,
          train_collector,
          test_collector,
          rank['agent_weak'],
          args.step_per_epoch,
          args.repeat_per_collect,
          args.test_num,
          args.batch_size,
          episode_per_collect=args.episode_per_collect,
          stop_fn=stop_fn,
          save_best_fn=save_best_fn,
          logger=logger,
          resume_from_log=args.resume,
          save_checkpoint_fn=save_checkpoint_fn,
      )
      for epoch, epoch_stat, info in trainer_weak:
          print(f"Epoch: {epoch}")
          print(epoch_stat)
      policy.unfreeze('agent_strong')

      policy.freeze('agent_weak')
      trainer_strong = OnpolicyTrainer(
          policy,
          train_collector,
          test_collector,
          rank['agent_strong'],
          args.step_per_epoch,
          args.repeat_per_collect,
          args.test_num,
          args.batch_size,
          episode_per_collect=args.episode_per_collect,
          stop_fn=stop_fn,
          save_best_fn=save_best_fn,
          logger=logger,
          resume_from_log=args.resume,
          save_checkpoint_fn=save_checkpoint_fn,
      )
      for epoch, epoch_stat, info in trainer_strong:
          print(f"Epoch: {epoch}")
          print(epoch_stat)
      policy.unfreeze('agent_weak')

      torch.save(
          {
              "agent_weak": policy.policies[agents[0]].state_dict(),
              "agent_strong": policy.policies[agents[1]].state_dict(),
              "gym_attrs": gym_attrs
          }, os.path.join(log_path, f"last_policy_{i}.pth")
      )


        #print(list(policy.policies['agent_strong'].parameters()))
        #print('\n--------------\n--------------\n--------------\n--------------\n--------------\n')

        # print(info)
        
        # policy.eval()
        # resl = policy.policies['agent_weak'](datum)

        # X = linspace_states[:, 2]
        # y = np.array(resl['act'].squeeze())

        # reg = LinearRegression().fit(np.expand_dims(X, axis=1), y)

        # fig, ax = plt.subplots()
        # ax.plot(X, y)
        # ax.plot(X, reg.predict(np.expand_dims(X, axis=1)))
        # plt.show()

    torch.save(
        {
            "agent_weak": policy.policies[agents[0]].state_dict(),
            "agent_strong": policy.policies[agents[1]].state_dict(),
            "gym_attrs": gym_attrs
        }, os.path.join(log_path, "last_policy.pth")
    )
    
    # print('huh')
    # print('22', trainer, '++++++')
    # print('55')
    
    
    # for epoch, epoch_stat, info in trainer:
    #     print(f"Epoch: {epoch}")
    #     print(epoch_stat)
    #     print(info)
    
    return trainer, policy

  

gym_attrs = {
    'gravity': 0.0,
    'k': 0.4,
    # 'debug_params': ['agent_strong zero'],
    'max_steps': 200,
    # 'strong_noise_sd': 0.0,
    'termination_reward': -50.0,
    'survival_bonus': 300.0,
}

args = get_args()
result, policy = train_agent(args, gym_attrs=gym_attrs)

'''
works well, changing max_steps, term and surv reward
trying 0g
'''